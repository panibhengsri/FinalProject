{"version":3,"sources":["components/SignIn.js","components/AddList.js","components/login.js","App.js","reportWebVitals.js","index.js"],"names":["SignIn","props","signInWithGoogle","provider","firebase","auth","GoogleAuthProvider","signInWithPopup","render","className","onClick","bind","React","Component","AddList","sendMessage","state","locc","update","locations","firestore","FieldValue","arrayUnion","locArr","map","element","me","collection","currentUser","uid","setState","doc","Login","onLoginClick","loggedIn","console","log","username","password","handleChange","handleSubmit","e","this","target","name","value","preventDefault","onSubmit","children","type","ref","placeholder","onChange","required","user","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","SignOut","signOut","App","useAuthState","locayRef","useRef","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18eebdd5.chunk.js","sourcesContent":["import React from 'react';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nclass SignIn extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.signInWithGoogle = this.signInWithGoogle.bind(this);\n    }\n\n    signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        this.props.auth.signInWithPopup(provider);\n    }\n\n    render = () => {\n        return (\n            <>\n                <button className=\"sign-in\" onClick={this.signInWithGoogle}>Sign in with Google</button>\n                <p>Do not violate the community guidelines or you will be banned for life!</p>\n            </>\n        );\n    }\n    \n}\n\nexport default SignIn;","import React from 'react';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nclass AddList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            me: this.props.firestore.collection(this.props.auth.currentUser.uid),\n            locc: null,\n            locArr: [1,2,3,4]\n        }\n\n        // const myID = this.props.auth.currentUser.uid;\n        // const container = document.querySelector('ul.locay');\n        \n        this.setState = ( (state) => ({\n            locc : this.state.me.doc('locations')\n        }));\n\n        this.sendMessage = this.sendMessage.bind(this);\n    }\n\n    sendMessage = () => {\n        \n        const placeholder = \"comp20\";\n\n        // adds new location to array\n        this.state.locc.update({\n            locations: firebase.firestore.FieldValue.arrayUnion(placeholder)\n        });\n\n        // setFormValue('');\n    }\n\n    render = () => {\n        return (<>\n            <main>\n                <div>\n                    {this.state.locArr.map((element) => {\n                        return <div> {element} </div>\n                    })}\n                </div>\n\n\n            </main>\n            {/* COMMENTED OUT PLACEHOLDER FOR PANI'S {ADD LOCATION BUTTON (or SUBMIT)} */}\n            {/* <form onSubmit={sendMessage}> */}\n            {/*  */}\n            {/* <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" /> */}\n            {/*  */}\n            {/* <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button> */}\n            {/*  */}\n            {/* </form> */}\n        </>)\n    }\n}\n\nexport default AddList;\n\n\n// AddList = () => {\n\n//     const myID = this.props.auth.currentUser.uid;\n//     const container = document.querySelector('ul.locay');\n//     const me = this.props.firestore.collection(myID);\n//     const locc = me.doc('locations');\n//     var locArr = [];\n\n//     locc.onSnapshot(docSnapshot => {\n//         locArr = docSnapshot.data().locations;\n\n//     });\n\n\n//     // const [formValue, setFormValue] = useState('');\n\n\n//     const sendMessage = async (e) => {\n//         e.preventDefault();\n\n//         const placeholder = \"comp20\";\n\n//         // adds new location to array\n//         locc.update({\n//             locations: firebase.firestore.FieldValue.arrayUnion(placeholder)\n//         });\n\n//         // setFormValue('');\n//     }\n\n// }","import React from 'react';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// import GoogleLogin from 'react-google-login';    // COMMENTED BY JEREMY JUNG\nimport SignIn from './SignIn.js';\nimport AddList from './AddList.js';\n\n\nimport {\n    BrowserRouter as Router, Route\n} from \"react-router-dom\";\n\nclass Login extends React.Component{\n    constructor(props){\n        super(props);\n\n        console.log(props);\n        this.state = {\n            loggedIn: false,\n            username: '',\n            password: '',\n            locations: []\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.SignIn = this.SignIn.bind(this);\n        // this.AddList = this.AddList.bind(this);\n        // const [user] = useAuthState(this.props.auth);\n    }\n\n    SignIn = () => {\n\n        const signInWithGoogle = () => {\n            const provider = new firebase.auth.GoogleAuthProvider();\n            this.props.auth.signInWithPopup(provider);\n        }\n\n\n        return (\n            <>\n                <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n                <p>Do not violate the community guidelines or you will be banned for life!</p>\n            </>\n        )\n\n    }\n\n    onLoginClick = () => {\n        this.setState({loggedIn: true})\n    }\n\n    handleChange(e){\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        // const userRef = firebase.database().ref('users');\n        const user = {\n            currentUser: this.state.username,\n            currentPassword: this.state.password\n        }\n        // userRef.push(user);\n        this.setState({\n            username: '',\n            password: ''\n        });\n    }\n\n    // login(){\n    //     //provider should be Google Auth Provider\n    //     auth.signInWithPopup(provider)\n    //         .then((result)=>{\n    //             const user = result.user;\n    //             this.setState({\n    //                 user\n    //             });\n    //         });\n    // }\n\n    // logout(){\n    //     auth.signOut()\n    //         .then(()=>{\n    //             this.setState({\n    //                 user:null\n    //             });\n    //         });\n    // }\n\n    render(){\n        return(\n\t\t<div className=\"container\">\n            <form onSubmit={this.handleSubmit}>\n                {this.props.children}\n                <h2>Sign In</h2>\n                <p>If you don't have an account, please sign-in using Google!</p>\n                <input \n                    type=\"text\" \n                    ref=\"username\" \n                    placeholder=\"username\"\n                    onChange={this.handleChange}\n                    value={this.state.username}\n                    required\n                /><br/>\n                <input \n                    type=\"password\" \n                    ref=\"password\" \n                    placeholder=\"password\"\n                    onChange={this.handleChange}\n                    value={this.state.password}\n                    required\n                /><br/>\n                <input type=\"submit\" value=\"login\"/>\n            </form>\n            <section>\n                {this.props.user ? <AddList firestore={this.props.firestore} auth = {this.props.auth} /> : <SignIn auth = {this.props.auth}/>}\n            </section>\n        {/* COMMENTED GOOGLE LOGIN (JEREMY JUNG) */}\n\t\t\t\t{/* <GoogleLogin \n                    //!!need OAuth ClientID from Firebase\n                    clientId = ''\n                    buttonText = \"Login\"\n                    onSuccess = {this.responseGoogle}\n                    onFailure = {this.responseGoogle}\n                    cookiePolicy = {'single_host_origin'}\n                /> */}\n\t\t\t\t\t</div>\n        )\n    }\n}\n\nexport default Login;","\nimport React, { useRef, useState } from 'react';\nimport './App.css';\nimport Login from './components/login.js'\n// import routes from './components/routes.js';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nvar config = {\n    apiKey: \"AIzaSyBozbLN9F8w_LCmJEvPsCIx82h7Hd0NtrY\",\n    authDomain: \"comp20finalproj.firebaseapp.com\",\n    projectId: \"comp20finalproj\",\n    storageBucket: \"comp20finalproj.appspot.com\",\n    messagingSenderId: \"721509114501\",\n    appId: \"1:721509114501:web:3e7a6c1a4147938ca77fec\",\n    measurementId: \"G-SJD7Z64VEP\"\n};\n\nfirebase.initializeApp(config);\n\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n  const locayRef = useRef();\n\n  return (\n    <div className=\"App\">\n        <header>\n          <h1>Our REACT APP</h1>\n\n          <ul className=\"locay\" ref={locayRef} id=\"locay\"></ul>\n          <SignOut />\n        </header>\n        <Login auth = {auth} firestore = {firestore} user = {user}></Login>\n      {/* <section> */}\n        {/* {user ? <AddList /> : <SignIn />} */}\n        {/*  */}\n      {/* </section> */}\n\n    </div>\n  );\n}\n\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}